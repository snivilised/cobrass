{
  "command-already-registered.cobrass": {
    "description": "Cobra command already registered in container",
    "other": "'cobra container: command '{{.Name}}' already registered"
  },
  "enum-value-already-exists.cobrass": {
    "description": "Invalid enum value",
    "other": "'{{.Value}} ({{.Number}})' already exists, invalid enum info specified"
  },
  "failed-to-add-validator-already-exists.cobrass": {
    "description": "Failed to add validator for flag because it already exists",
    "other": "failed to add validator for flag: '{{.Flag}}', because it already exists"
  },
  "is-not-valid-enum-value.cobrass": {
    "description": "Not a valid enum value",
    "other": "'{{.Source}}' is not a valid enum value"
  },
  "language-not-supported.cobrass": {
    "description": "The language specified is not supported; no translations for this language.",
    "other": "language '{{.Language}}' not supported"
  },
  "ov-failed-at-least.cobrass": {
    "description": "'AtLeast' Option validation has failed due to Value not being at least the threshold.",
    "other": "({{.Flag}}): option validation failed, '{{.Value}}', not at least: [{{.Threshold}}]"
  },
  "ov-failed-at-most.cobrass": {
    "description": "'AtMost' Option validation has failed due to Value not being at most the threshold.",
    "other": "({{.Flag}}): option validation failed, '{{.Value}}', not at most: [{{.Threshold}}]"
  },
  "ov-failed-contains.cobrass": {
    "description": "'Contains' Option validation has failed due to Value not being a member of collection.",
    "other": "({{.Flag}}): option validation failed, '{{.Value}}', not a member of: [{{.Collection}}]"
  },
  "ov-failed-greater-than.cobrass": {
    "description": "'GreaterThan' Option validation has failed due to Value not being greater than threshold.",
    "other": "({{.Flag}}): option validation failed, '{{.Value}}', not greater than: [{{.Threshold}}]"
  },
  "ov-failed-less-than.cobrass": {
    "description": "'LessThan' Option validation has failed due to Value not being less than the threshold.",
    "other": "({{.Flag}}): option validation failed, '{{.Value}}', not less than: [{{.Threshold}}]"
  },
  "ov-failed-match.cobrass": {
    "description": "'Match' Option validation has failed due to Value not matching the regex pattern.",
    "other": "({{.Flag}}): option validation failed, '{{.Value}}', does not match: [{{.Pattern}}]"
  },
  "ov-failed-not-contains.cobrass": {
    "description": "'Contains' Option validation has failed due to Value being a member of collection.",
    "other": "({{.Flag}}): option validation failed, '{{.Value}}', is a member of: [{{.Collection}}]"
  },
  "ov-failed-not-match.cobrass": {
    "description": "'Match' Option validation has failed due to Value matching the regex pattern.",
    "other": "({{.Flag}}): option validation failed, '{{.Value}}', matches: [{{.Pattern}}]"
  },
  "ov-failed-not-within.cobrass": {
    "description": "'Within' Option validation has failed due to Value being inside of range.",
    "other": "({{.Flag}}): option validation failed, '{{.Value}}', is inside of range: [{{.Lo}}]..[{{.Hi}}]"
  },
  "ov-failed-within.cobrass": {
    "description": "'Within' Option validation has failed due to Value being out of range.",
    "other": "({{.Flag}}): option validation failed, '{{.Value}}', out of range: [{{.Lo}}]..[{{.Hi}}]"
  },
  "param-set-already-registered.cobrass": {
    "description": "Param set already registered in container",
    "other": "parameter set '{{.Name}}' already registered"
  },
  "param-set-not-found.cobrass": {
    "description": "The parameter set not found.",
    "other": "parameter set '{{.Name}}' not found"
  },
  "param-set-object-must-be-pointer.cobrass": {
    "description": "The native Parameter Set object denoted, must be a pointer.",
    "other": "the native param set object ('{{.Name}}') must be a pointer, actual type: '{{.Type}}'"
  },
  "param-set-object-must-be-struct.cobrass": {
    "description": "The native Parameter Set object denoted, must be a struct.",
    "other": "the native param set object ('{{.Name}}') must be a struct, actual type: '{{.Type}}'"
  },
  "parent-command-not-registered.cobrass": {
    "description": "Parent Cobra command not registered in container",
    "other": "cobra container: parent command '{{.Parent}}' not registered"
  }
}
