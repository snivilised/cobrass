// Code generated by MockGen. DO NOT EDIT.
// Source: src/assistant/configuration/global-config.go
//
// Generated by this command:
//
//	mockgen -destination src/assistant/mocks/mock-global-viper-config.go -package mocks -source src/assistant/configuration/global-config.go -mock_names ViperConfig=MockViperConfig
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	pflag "github.com/spf13/pflag"
	viper "github.com/spf13/viper"
	gomock "go.uber.org/mock/gomock"
)

// MockViperConfig is a mock of ViperConfig interface.
type MockViperConfig struct {
	ctrl     *gomock.Controller
	recorder *MockViperConfigMockRecorder
}

// MockViperConfigMockRecorder is the mock recorder for MockViperConfig.
type MockViperConfigMockRecorder struct {
	mock *MockViperConfig
}

// NewMockViperConfig creates a new mock instance.
func NewMockViperConfig(ctrl *gomock.Controller) *MockViperConfig {
	mock := &MockViperConfig{ctrl: ctrl}
	mock.recorder = &MockViperConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockViperConfig) EXPECT() *MockViperConfigMockRecorder {
	return m.recorder
}

// AddConfigPath mocks base method.
func (m *MockViperConfig) AddConfigPath(in string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddConfigPath", in)
}

// AddConfigPath indicates an expected call of AddConfigPath.
func (mr *MockViperConfigMockRecorder) AddConfigPath(in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddConfigPath", reflect.TypeOf((*MockViperConfig)(nil).AddConfigPath), in)
}

// AutomaticEnv mocks base method.
func (m *MockViperConfig) AutomaticEnv() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AutomaticEnv")
}

// AutomaticEnv indicates an expected call of AutomaticEnv.
func (mr *MockViperConfigMockRecorder) AutomaticEnv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutomaticEnv", reflect.TypeOf((*MockViperConfig)(nil).AutomaticEnv))
}

// BindFlagValue mocks base method.
func (m *MockViperConfig) BindFlagValue(key string, flag viper.FlagValue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindFlagValue", key, flag)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindFlagValue indicates an expected call of BindFlagValue.
func (mr *MockViperConfigMockRecorder) BindFlagValue(key, flag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindFlagValue", reflect.TypeOf((*MockViperConfig)(nil).BindFlagValue), key, flag)
}

// BindFlagValues mocks base method.
func (m *MockViperConfig) BindFlagValues(flags viper.FlagValueSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindFlagValues", flags)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindFlagValues indicates an expected call of BindFlagValues.
func (mr *MockViperConfigMockRecorder) BindFlagValues(flags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindFlagValues", reflect.TypeOf((*MockViperConfig)(nil).BindFlagValues), flags)
}

// BindPFlag mocks base method.
func (m *MockViperConfig) BindPFlag(key string, flag *pflag.Flag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindPFlag", key, flag)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindPFlag indicates an expected call of BindPFlag.
func (mr *MockViperConfigMockRecorder) BindPFlag(key, flag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindPFlag", reflect.TypeOf((*MockViperConfig)(nil).BindPFlag), key, flag)
}

// ConfigFileUsed mocks base method.
func (m *MockViperConfig) ConfigFileUsed() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigFileUsed")
	ret0, _ := ret[0].(string)
	return ret0
}

// ConfigFileUsed indicates an expected call of ConfigFileUsed.
func (mr *MockViperConfigMockRecorder) ConfigFileUsed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigFileUsed", reflect.TypeOf((*MockViperConfig)(nil).ConfigFileUsed))
}

// Get mocks base method.
func (m *MockViperConfig) Get(key string) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(any)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockViperConfigMockRecorder) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockViperConfig)(nil).Get), key)
}

// GetBool mocks base method.
func (m *MockViperConfig) GetBool(key string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBool", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetBool indicates an expected call of GetBool.
func (mr *MockViperConfigMockRecorder) GetBool(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBool", reflect.TypeOf((*MockViperConfig)(nil).GetBool), key)
}

// GetDuration mocks base method.
func (m *MockViperConfig) GetDuration(key string) time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDuration", key)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetDuration indicates an expected call of GetDuration.
func (mr *MockViperConfigMockRecorder) GetDuration(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDuration", reflect.TypeOf((*MockViperConfig)(nil).GetDuration), key)
}

// GetFloat64 mocks base method.
func (m *MockViperConfig) GetFloat64(key string) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFloat64", key)
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetFloat64 indicates an expected call of GetFloat64.
func (mr *MockViperConfigMockRecorder) GetFloat64(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFloat64", reflect.TypeOf((*MockViperConfig)(nil).GetFloat64), key)
}

// GetInt mocks base method.
func (m *MockViperConfig) GetInt(key string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInt", key)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetInt indicates an expected call of GetInt.
func (mr *MockViperConfigMockRecorder) GetInt(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInt", reflect.TypeOf((*MockViperConfig)(nil).GetInt), key)
}

// GetInt32 mocks base method.
func (m *MockViperConfig) GetInt32(key string) int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInt32", key)
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetInt32 indicates an expected call of GetInt32.
func (mr *MockViperConfigMockRecorder) GetInt32(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInt32", reflect.TypeOf((*MockViperConfig)(nil).GetInt32), key)
}

// GetInt64 mocks base method.
func (m *MockViperConfig) GetInt64(key string) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInt64", key)
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetInt64 indicates an expected call of GetInt64.
func (mr *MockViperConfigMockRecorder) GetInt64(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInt64", reflect.TypeOf((*MockViperConfig)(nil).GetInt64), key)
}

// GetIntSlice mocks base method.
func (m *MockViperConfig) GetIntSlice(key string) []int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntSlice", key)
	ret0, _ := ret[0].([]int)
	return ret0
}

// GetIntSlice indicates an expected call of GetIntSlice.
func (mr *MockViperConfigMockRecorder) GetIntSlice(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntSlice", reflect.TypeOf((*MockViperConfig)(nil).GetIntSlice), key)
}

// GetSizeInBytes mocks base method.
func (m *MockViperConfig) GetSizeInBytes(key string) uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSizeInBytes", key)
	ret0, _ := ret[0].(uint)
	return ret0
}

// GetSizeInBytes indicates an expected call of GetSizeInBytes.
func (mr *MockViperConfigMockRecorder) GetSizeInBytes(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSizeInBytes", reflect.TypeOf((*MockViperConfig)(nil).GetSizeInBytes), key)
}

// GetString mocks base method.
func (m *MockViperConfig) GetString(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetString", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetString indicates an expected call of GetString.
func (mr *MockViperConfigMockRecorder) GetString(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetString", reflect.TypeOf((*MockViperConfig)(nil).GetString), key)
}

// GetStringMap mocks base method.
func (m *MockViperConfig) GetStringMap(key string) map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStringMap", key)
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// GetStringMap indicates an expected call of GetStringMap.
func (mr *MockViperConfigMockRecorder) GetStringMap(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStringMap", reflect.TypeOf((*MockViperConfig)(nil).GetStringMap), key)
}

// GetStringMapString mocks base method.
func (m *MockViperConfig) GetStringMapString(key string) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStringMapString", key)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetStringMapString indicates an expected call of GetStringMapString.
func (mr *MockViperConfigMockRecorder) GetStringMapString(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStringMapString", reflect.TypeOf((*MockViperConfig)(nil).GetStringMapString), key)
}

// GetStringMapStringSlice mocks base method.
func (m *MockViperConfig) GetStringMapStringSlice(key string) map[string][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStringMapStringSlice", key)
	ret0, _ := ret[0].(map[string][]string)
	return ret0
}

// GetStringMapStringSlice indicates an expected call of GetStringMapStringSlice.
func (mr *MockViperConfigMockRecorder) GetStringMapStringSlice(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStringMapStringSlice", reflect.TypeOf((*MockViperConfig)(nil).GetStringMapStringSlice), key)
}

// GetStringSlice mocks base method.
func (m *MockViperConfig) GetStringSlice(key string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStringSlice", key)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetStringSlice indicates an expected call of GetStringSlice.
func (mr *MockViperConfigMockRecorder) GetStringSlice(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStringSlice", reflect.TypeOf((*MockViperConfig)(nil).GetStringSlice), key)
}

// GetTime mocks base method.
func (m *MockViperConfig) GetTime(key string) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTime", key)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetTime indicates an expected call of GetTime.
func (mr *MockViperConfigMockRecorder) GetTime(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTime", reflect.TypeOf((*MockViperConfig)(nil).GetTime), key)
}

// GetUint mocks base method.
func (m *MockViperConfig) GetUint(key string) uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUint", key)
	ret0, _ := ret[0].(uint)
	return ret0
}

// GetUint indicates an expected call of GetUint.
func (mr *MockViperConfigMockRecorder) GetUint(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUint", reflect.TypeOf((*MockViperConfig)(nil).GetUint), key)
}

// GetUint16 mocks base method.
func (m *MockViperConfig) GetUint16(key string) uint16 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUint16", key)
	ret0, _ := ret[0].(uint16)
	return ret0
}

// GetUint16 indicates an expected call of GetUint16.
func (mr *MockViperConfigMockRecorder) GetUint16(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUint16", reflect.TypeOf((*MockViperConfig)(nil).GetUint16), key)
}

// GetUint32 mocks base method.
func (m *MockViperConfig) GetUint32(key string) uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUint32", key)
	ret0, _ := ret[0].(uint32)
	return ret0
}

// GetUint32 indicates an expected call of GetUint32.
func (mr *MockViperConfigMockRecorder) GetUint32(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUint32", reflect.TypeOf((*MockViperConfig)(nil).GetUint32), key)
}

// GetUint64 mocks base method.
func (m *MockViperConfig) GetUint64(key string) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUint64", key)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetUint64 indicates an expected call of GetUint64.
func (mr *MockViperConfigMockRecorder) GetUint64(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUint64", reflect.TypeOf((*MockViperConfig)(nil).GetUint64), key)
}

// InConfig mocks base method.
func (m *MockViperConfig) InConfig(key string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InConfig", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// InConfig indicates an expected call of InConfig.
func (mr *MockViperConfigMockRecorder) InConfig(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InConfig", reflect.TypeOf((*MockViperConfig)(nil).InConfig), key)
}

// ReadInConfig mocks base method.
func (m *MockViperConfig) ReadInConfig() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadInConfig")
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadInConfig indicates an expected call of ReadInConfig.
func (mr *MockViperConfigMockRecorder) ReadInConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadInConfig", reflect.TypeOf((*MockViperConfig)(nil).ReadInConfig))
}

// SetConfigFile mocks base method.
func (m *MockViperConfig) SetConfigFile(in string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConfigFile", in)
}

// SetConfigFile indicates an expected call of SetConfigFile.
func (mr *MockViperConfigMockRecorder) SetConfigFile(in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfigFile", reflect.TypeOf((*MockViperConfig)(nil).SetConfigFile), in)
}

// SetConfigName mocks base method.
func (m *MockViperConfig) SetConfigName(in string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConfigName", in)
}

// SetConfigName indicates an expected call of SetConfigName.
func (mr *MockViperConfigMockRecorder) SetConfigName(in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfigName", reflect.TypeOf((*MockViperConfig)(nil).SetConfigName), in)
}

// SetConfigType mocks base method.
func (m *MockViperConfig) SetConfigType(in string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConfigType", in)
}

// SetConfigType indicates an expected call of SetConfigType.
func (mr *MockViperConfigMockRecorder) SetConfigType(in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfigType", reflect.TypeOf((*MockViperConfig)(nil).SetConfigType), in)
}

// SetTypeByDefaultValue mocks base method.
func (m *MockViperConfig) SetTypeByDefaultValue(enable bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTypeByDefaultValue", enable)
}

// SetTypeByDefaultValue indicates an expected call of SetTypeByDefaultValue.
func (mr *MockViperConfigMockRecorder) SetTypeByDefaultValue(enable any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTypeByDefaultValue", reflect.TypeOf((*MockViperConfig)(nil).SetTypeByDefaultValue), enable)
}

// Sub mocks base method.
func (m *MockViperConfig) Sub(key string) *viper.Viper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sub", key)
	ret0, _ := ret[0].(*viper.Viper)
	return ret0
}

// Sub indicates an expected call of Sub.
func (mr *MockViperConfigMockRecorder) Sub(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sub", reflect.TypeOf((*MockViperConfig)(nil).Sub), key)
}

// Unmarshal mocks base method.
func (m *MockViperConfig) Unmarshal(rawVal any, opts ...viper.DecoderConfigOption) error {
	m.ctrl.T.Helper()
	varargs := []any{rawVal}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Unmarshal", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockViperConfigMockRecorder) Unmarshal(rawVal any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{rawVal}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockViperConfig)(nil).Unmarshal), varargs...)
}

// UnmarshalExact mocks base method.
func (m *MockViperConfig) UnmarshalExact(rawVal any, opts ...viper.DecoderConfigOption) error {
	m.ctrl.T.Helper()
	varargs := []any{rawVal}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnmarshalExact", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalExact indicates an expected call of UnmarshalExact.
func (mr *MockViperConfigMockRecorder) UnmarshalExact(rawVal any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{rawVal}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalExact", reflect.TypeOf((*MockViperConfig)(nil).UnmarshalExact), varargs...)
}

// UnmarshalKey mocks base method.
func (m *MockViperConfig) UnmarshalKey(key string, rawVal any, opts ...viper.DecoderConfigOption) error {
	m.ctrl.T.Helper()
	varargs := []any{key, rawVal}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnmarshalKey", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalKey indicates an expected call of UnmarshalKey.
func (mr *MockViperConfigMockRecorder) UnmarshalKey(key, rawVal any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{key, rawVal}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalKey", reflect.TypeOf((*MockViperConfig)(nil).UnmarshalKey), varargs...)
}
