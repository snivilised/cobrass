package assistant_test

import (
	"fmt"
	"net"
	"time"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
	"github.com/spf13/cobra"
	"github.com/spf13/pflag"

	"github.com/snivilised/cobrass/src/assistant"
)

type OvEntry struct {
	Message   string
	Validator func() assistant.OptionValidator
	Setup     func()
}

var _ = Describe("OptionValidator", func() {

	var rootCommand *cobra.Command
	var widgetCommand *cobra.Command
	var paramSet *assistant.ParamSet[WidgetParameterSet]
	var outputFormatEnumInfo *assistant.EnumInfo[OutputFormatEnum]

	BeforeEach(func() {
		outputFormatEnumInfo = assistant.NewEnumInfo(AcceptableOutputFormats)

		rootCommand = &cobra.Command{
			Use:   "poke",
			Short: "A brief description of your application",
			Long:  "A long description of the root poke command",
		}

		widgetCommand = &cobra.Command{
			Version: "1.0.1",
			Use:     "widget",
			Short:   "Create widget",
			Long:    "Index file system at root: '/'",
			Args:    cobra.ExactArgs(1),

			RunE: func(command *cobra.Command, args []string) error {
				GinkgoWriter.Printf("===> 🍓 EXECUTE (Directory: '%v')\n", args[0])

				paramSet.Native.Directory = args[0]
				return nil
			},
		}
		rootCommand.AddCommand(widgetCommand)

		paramSet = assistant.NewParamSet[WidgetParameterSet](widgetCommand)
	})

	DescribeTable("ParamSet with validation",
		func(entry OvEntry) {
			validator := entry.Validator()
			entry.Setup()
			_ = validator.Validate()
		},
		func(entry OvEntry) string {
			return fmt.Sprintf("🧪 --> 🍒 given: flag type is '%v'", entry.Message)
		},

		// ----> auto generated(Build-TestEntry/gen-ov-t)

    {{ PLACEHOLDER }}

		// <---- end of auto generated
	)
})
