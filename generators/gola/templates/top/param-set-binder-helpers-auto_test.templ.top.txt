package assistant_test

import (
	"fmt"
	"time"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
	"github.com/spf13/cobra"

	"github.com/snivilised/cobrass/src/assistant"
)

type validatorDecorator struct {
	Decorated assistant.OptionValidator
}

func (v *validatorDecorator) Validate() error {
	flag := v.Decorated.GetFlag()
	flag.Changed = true

	return v.Decorated.Validate()
}

var _ = Describe("ParamSetBinderHelpers", func() {
	var rootCommand *cobra.Command
	var widgetCommand *cobra.Command
	var paramSet *assistant.ParamSet[WidgetParameterSet]
	var outputFormatEnumInfo *assistant.EnumInfo[OutputFormatEnum]
	var outputFormatEnum assistant.EnumValue[OutputFormatEnum]

	Context("Comparables", func() {
		BeforeEach(func() {
			outputFormatEnumInfo = assistant.NewEnumInfo(AcceptableOutputFormats)
			outputFormatEnum = outputFormatEnumInfo.NewValue()

			rootCommand = &cobra.Command{
				Use:   "flick",
				Short: "A brief description of your application",
				Long:  "A long description of the root flick command",
			}

			widgetCommand = &cobra.Command{
				Version: "1.0.1",
				Use:     "widget",
				Short:   "Create widget",
				Long:    "Index file system at root: '/'",
				Args:    cobra.ExactArgs(1),
				RunE: func(command *cobra.Command, args []string) error {
					paramSet.Native.Directory = args[0]
					return nil
				},
			}
			rootCommand.AddCommand(widgetCommand)
			paramSet = assistant.NewParamSet[WidgetParameterSet](widgetCommand)
		})

		// ----> auto generated(Build-BinderHelperTests/gen-help-t)

    {{ PLACEHOLDER }}

		// <---- auto generated
	})
})
